/* Copyright (c) 2013 National Research Institute for Earth Science and
 * Disaster Prevention (NIED).
 * This code is licensed under the GPL version 3 license, available at the root
 * application directory.
 */
package jp.ecom_plat.saigaitask.service.tagfunction;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.seasar.framework.beans.util.BeanMap;
import org.seasar.framework.util.StringUtil;

import jp.ecom_plat.map.db.AttrInfo;
import jp.ecom_plat.map.db.LayerInfo;
import jp.ecom_plat.saigaitask.dto.FilterDto;
import jp.ecom_plat.saigaitask.dto.LoginDataDto;
import jp.ecom_plat.saigaitask.entity.db.FilterInfo;
import jp.ecom_plat.saigaitask.entity.db.TablemasterInfo;
import jp.ecom_plat.saigaitask.entity.db.TrackData;
import jp.ecom_plat.saigaitask.entity.db.TracktableInfo;
import jp.ecom_plat.saigaitask.service.TableService;
import jp.ecom_plat.saigaitask.service.db.TablemasterInfoService;
import jp.ecom_plat.saigaitask.service.db.TrackDataService;
import jp.ecom_plat.saigaitask.service.db.TracktableInfoService;
import jp.ecom_plat.saigaitask.service.ecommap.LayerService;
import jp.ecom_plat.saigaitask.service.ecommap.MapService;

/**
 * エクセル帳票用のタグ関数を処理するサービスクラス
 */
@org.springframework.stereotype.Service
public class TagFunctionService {

	/** サービスクラス */
	@Resource
	private TableService tableService;
	@Resource
	private MapService mapService;
	@Resource
	private LayerService layerService;
	@Resource
	private TrackDataService trackDataService;

    @Resource
    private LoginDataDto loginDataDto;

    @Resource
    private TracktableInfoService tracktableInfoService;
    @Resource
    private TablemasterInfoService tablemasterInfoService;

    private Map<TagFunction, TagFunctionShared> functionMap = null;
	private List<CellInfo> cellInfoList;
	private Map<TagFunction, int[]>autoGeneratedIds;

	private Map<String,String> layerMap;
	private Date datetime;

	public boolean generatingIdnode = false;

	/**
	 * タグ情報
	 */
	private class TagInfo {
		String text;
		TagFunction tagFunction;
	}

	/**
	 *　セル情報
	 */
	private class CellInfo {
		List<TagInfo> tagInfoList;
		CellInfo() {
			tagInfoList = new ArrayList<TagInfo>();
		}
	}

	/**
	 * タグ関数を含む文字列のリストを受け取り、タグをパーズし、DB からのデータ取得までを行う
	 *
	 * @param values
	 */
	public void prepare(List<String> values) {

		//inputValues = values;
		cellInfoList = new ArrayList<CellInfo>();
		functionMap = new HashMap<TagFunction, TagFunctionShared>();
		autoGeneratedIds = new HashMap<TagFunction, int[]>();
		generatingIdnode = false;

		for (String text : values) {
			CellInfo cellInfo = new CellInfo();
			for (int end = 0; ; end += 2) {
				TagInfo tagInfo = new TagInfo();

				// 次の <% を見つける
				int begin = text.indexOf("<%", end);
				if (begin < 0) {
					tagInfo.text = text.substring(end);
					cellInfo.tagInfoList.add(tagInfo);
					break;
				}
				tagInfo.text = text.substring(end, begin);

				// 次の %> を見つける
				end = text.indexOf("%>", begin);
				if (end < 0) {
					tagInfo.text += text.substring(begin);
					cellInfo.tagInfoList.add(tagInfo);
					break;
				}

				// タグ関数をパースする
				TagFunction tagFunction = new TagFunction(text.substring(begin + 2, end), this);
				tagFunction.parse();

				if (tagFunction.error == null) {

					// レイヤＩＤ と filter() が同一のタグ関数は、ＤＢから取得したデータを共有する
					TagFunctionShared tagFunctionShared = functionMap.get(tagFunction);
					if (tagFunctionShared == null) {
						tagFunctionShared = new TagFunctionShared(tagFunction);
						functionMap.put(tagFunction, tagFunctionShared);
					}
					tagFunction.setShare(tagFunctionShared);

					// id(n) の最大値を求める（ページ換え用）
					tagFunctionShared.updateMaxRow(tagFunction);
				}

				tagInfo.tagFunction = tagFunction;
				cellInfo.tagInfoList.add(tagInfo);
			}
			cellInfoList.add(cellInfo);
		}

		// .id(n) が省略された場合に、自動的に　Ｉｄ　ノードを生成する
		generatingIdnode = true;
		for (CellInfo cellInfo : cellInfoList) {
			for (TagInfo tagInfo : cellInfo.tagInfoList) {
				if (tagInfo.tagFunction != null && tagInfo.tagFunction.error == null) {
					tagInfo.tagFunction.collectMissingIdNode(autoGeneratedIds);
				}
			}
		}
		for (CellInfo cellInfo : cellInfoList) {
			for (TagInfo tagInfo : cellInfo.tagInfoList) {
				if (tagInfo.tagFunction != null && tagInfo.tagFunction.error == null) {
					tagInfo.tagFunction.generateMissingIdNode();

					// id(n) の最大値を求める（ページ換え用）
					tagInfo.tagFunction.share.updateMaxRow(tagInfo.tagFunction);
				}
			}
		}

		// DB よりデータを読み込む
		for (TagFunctionShared share : functionMap.values()) {
			share.load();
		}
	}

	/**
	 * ページ数を返す
	 *
	 * @return
	 */
	public int getPageCount() {
		int maxPage = 0;
		for (TagFunctionShared share : functionMap.values()) {
			int cnt = share.getPageCount();
			if (maxPage < cnt)
				maxPage = cnt;
		}
		return maxPage;
	}

	/**
	 * １ページ分のデータを取得する
	 *
	 * @param page
	 * @return
	 */
	public List<String> getPage(int page) {
		List<String> result = new ArrayList<String>();
		for (CellInfo cellInfo : cellInfoList) {
			StringBuilder sb = new StringBuilder();
			for (TagInfo tagInfo : cellInfo.tagInfoList) {

				// タグ以外の文字列を追加する
				sb.append(tagInfo.text);

				// タグの文字列を追加する
				if (tagInfo.tagFunction != null) {
					sb.append(tagInfo.tagFunction.execute(page));
				}
			}
			result.add(sb.toString());
		}
		return result;
	}

	/**
	 * is_editable:"true" が指定されているかを返す
	 *
	 * @param page
	 * @return
	 */
	public List<Boolean> getEditable() {
		List<Boolean> result = new ArrayList<Boolean>();
		for (CellInfo cellInfo : cellInfoList) {
			boolean editable = false;
			for (TagInfo tagInfo : cellInfo.tagInfoList) {
				if (tagInfo.tagFunction != null && tagInfo.tagFunction.editable) {
					editable = true;
					break;
				}
			}
			result.add(editable);
		}
		return result;
	}

	/**
	 * フィルタの存在チェック
	 *
	 * @param layerId
	 * @throws TagFunctionException
	 */
	public void checkFilter(long fiterId) throws TagFunctionException {
    	FilterInfo filterInfo = new FilterInfo();
    	filterInfo.filterid = fiterId;
    	filterInfo.name = "TagFunctionFilter";
    	try{
        	JSONObject c = mapService.getConditionValue(filterInfo);
    		if (c == null){
    			throw new TagFunctionException(TagFunctionException.INVALID_FILTERID);
    		}
    	}catch(Exception e){
			throw new TagFunctionException(TagFunctionException.INVALID_FILTERID);
    	}
	}

	/**
	 * レイヤの存在チェック
	 *
	 * @param layerId
	 * @throws TagFunctionException
	 */
	public void checkLayer(String layerId) throws TagFunctionException {
		LayerInfo layerInfo = layerService.getLayerInfo(layerId);
		if (layerInfo == null){
			throw new TagFunctionException(TagFunctionException.INVALID_LAYER);
		}else{
			// TODO マスターマップ上のレイヤに限定
		}
	}

	/**
	 * 属性の存在チェック
	 *
	 * @param layerId
	 * @throws TagFunctionException
	 */
	public void checkAttr(String layerId, String attrId) throws TagFunctionException {
		LayerInfo layerInfo = layerService.getLayerInfo(layerId);
		if (layerInfo == null){
			throw new TagFunctionException(TagFunctionException.INVALID_LAYER);
		}else{
			AttrInfo attr =  layerInfo.getAttrInfo(attrId);
			if(attr == null){
				throw new TagFunctionException(TagFunctionException.INVALID_ATTR);
			}
		}
	}

	/**
	 * 属性の値を取得する
	 *
	 * @param tablename
	 * @return
	 */
	public List<BeanMap> selectAll(String tablename) {
		Timestamp[] timestamp = null;
		if (datetime != null)
			timestamp = new Timestamp[] { new Timestamp(datetime.getTime()) };
		List<BeanMap> resultSet = tableService.selectAll(tablename, "ASC", "gid", timestamp);
	    return resultSet;
	}

	/**
	 * 属性の型情報を取得する
	 *
	 * @param layerId
	 * @return
	 */
	public Map<String, JSONObject> getAttrInfo(String layerId) {
		Map<String, JSONObject> result = new HashMap<String, JSONObject>();
		try {
			JSONObject info = mapService.getAttrInfo(layerId);
			JSONArray attrArray = info.getJSONArray("attrInfos");
			for (int i = 0; i < attrArray.length(); i++) {
				JSONObject attr = attrArray.getJSONObject(i);
				result.put(attr.getString("attrId"), attr);
			}
		} catch (JSONException e) {
		}
		return result;
	}

	/**
	 * フィルタＩＤより、対象の gid の一覧を取得する
	 * @param filterId
	 * @return
	 */
	public Map<Long, String> filter(long filterId) {

    	// フィルタＩＤより、対象 gidまたは_orgid の一覧を得る
    	FilterInfo filterInfo = new FilterInfo();
    	filterInfo.filterid = filterId;
    	filterInfo.name = "TagFunctionFilter";

    	Date [] dateParams = null;
    	if(datetime != null){
    		dateParams = new Date []{datetime};
    	}
    	FilterDto filterDto = mapService.filter(filterInfo, dateParams);
//    	FilterDto filterDto = mapService.filter(filterInfo, /*timeParam*/null);

    	String key = "gid";
    	if(!StringUtil.isEmpty(filterDto.getLayerId())){
        	LayerInfo linfo = layerService.getLayerInfo(filterDto.getLayerId());
    		key = LayerInfo.TimeSeriesType.HISTORY.equals(linfo.timeSeriesType) ? "_orgid" : "gid";
    	}

    	// 対象 gidまたは_orgid の Map を作成する
    	Map<Long, String> gidSet = new HashMap<Long, String>();
    	for (Long filterid : filterDto.getFilteredFeatureIds()) {
    		gidSet.put(filterid, key);
    	}

    	return gidSet;
	}

	/**
	 * LoginDataDto オブジェクトを返す
	 *
	 * @return
	 */
	public LoginDataDto getLoginDataDto() {
		return loginDataDto;
	}

	/**
	 * TrackData オブジェクトを返す
	 *
	 * @return
	 */
	public TrackData getTrackData() {
		return trackDataService.findById(loginDataDto.getTrackdataid());
	}

	public void initLayerMap(){
		layerMap = new HashMap<String, String>();
		if(loginDataDto.getTrackdataid() > 0){
			List<TracktableInfo> tracktableInfoList = tracktableInfoService.findByTrackDataId(loginDataDto.getTrackdataid());
			for(TracktableInfo tracktableInfo : tracktableInfoList){
				if(! StringUtil.isEmpty(tracktableInfo.layerid) ){
					TablemasterInfo tablemasterInfo = tablemasterInfoService.findById(tracktableInfo.tablemasterinfoid);
					if(tablemasterInfo != null){
						layerMap.put(tablemasterInfo.layerid, tracktableInfo.layerid);
					}
				}
			}
		}else{
			List<TablemasterInfo> tablemasterInfoList = tablemasterInfoService.findByLocalgovinfoid(loginDataDto.getLocalgovinfoid());
			for(TablemasterInfo tablemasterInfo :tablemasterInfoList){
				if(! StringUtil.isEmpty(tablemasterInfo.layerid)){
					layerMap.put(tablemasterInfo.layerid, tablemasterInfo.layerid);
				}
			}
		}
	}

	public String getLayerId(String layerId){
		if(layerMap == null || layerMap.size() <= 0 || !layerMap.containsKey(layerId)){
			return layerId;
		}else{
			return layerMap.get(layerId);
		}
	}

	public void setDatetime(Date datetime){
		this.datetime = datetime;
	}
}
