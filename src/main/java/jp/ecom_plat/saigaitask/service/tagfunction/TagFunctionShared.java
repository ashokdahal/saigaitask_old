/* Copyright (c) 2013 National Research Institute for Earth Science and
 * Disaster Prevention (NIED).
 * This code is licensed under the GPL version 3 license, available at the root
 * application directory.
 */
package jp.ecom_plat.saigaitask.service.tagfunction;

import java.util.List;
import java.util.Map;

import jp.ecom_plat.map.db.AttrInfo;
import jp.ecom_plat.saigaitask.service.tagfunction.node.TagFunctionNode;

import org.json.JSONException;
import org.json.JSONObject;
import org.seasar.framework.beans.util.BeanMap;

/**
 * 複数のタグで共有するデータを保持するクラス
 */
public class TagFunctionShared {

	public String attr;
	public int maxRowId = 0;
	public List<BeanMap> valueList;
	public Map<String, JSONObject> attrInfo;
	private TagFunctionNode rootNode = null;
	//public int autoGeneratedId = 0;

	protected TagFunctionShared(TagFunction tagFunction) {
		this.attr = tagFunction.attr;
		this.rootNode = tagFunction.rootNode;
	}

	/**
	 * 最大の項目番号（ページ換えで使用する）を更新する
	 *
	 * @param tagFunction
	 */
	public void updateMaxRow(TagFunction tagFunction) {
		if (maxRowId < tagFunction.rowId)
			maxRowId = tagFunction.rowId;
	}

	/**
	 * ＤＢよりデータを取得し、必要に応じてフィルタを適用する
	 *
	 */
	public void load() {
		if (rootNode != null)
			rootNode.load();
	}

    /**
     * 属性の型情報を取得する
     *
     * @return
     * @throws TagFunctionException
     */
    public int getAttrType(String attrName) throws TagFunctionException {
    	if (attrInfo == null)
    		throw new TagFunctionException(TagFunctionException.PARSE_ERROR);
    	JSONObject attrInfo = this.attrInfo.get(attrName);
    	if (attrInfo == null)
    		throw new TagFunctionException(TagFunctionException.INVALID_ATTR);
    	try {
			return attrInfo.getInt("dataType");
		} catch (JSONException e) {
			throw new TagFunctionException(TagFunctionException.INTERNAL_ERROR);
		}
    }

    /**
     * 属性が数値型かどうかを返す
     *
     * @return
     * @throws TagFunctionException
     */
    public boolean isNumericType(String attrName) throws TagFunctionException {
    	switch (getAttrType(attrName)) {
    	case AttrInfo.DATATYPE_INTEGER:
    	case AttrInfo.DATATYPE_FLOAT:
    	case AttrInfo.DATATYPE_SELECT_INTEGER:
    		return true;
    	}
    	return false;
    }

    /**
     * 属性が整数型かどうかを返す
     *
     * @return
     * @throws TagFunctionException
     */
    public boolean isIntegerType(String attrName) throws TagFunctionException {
    	switch (getAttrType(attrName)) {
    	case AttrInfo.DATATYPE_INTEGER:
    	case AttrInfo.DATATYPE_SELECT_INTEGER:
    		return true;
    	}
    	return false;
    }

	/**
	 * ページ数を返す
	 *
	 * @return
	 */
	public int getPageCount() {
		if (maxRowId <= 0 || valueList == null)
			return 0;
		return (valueList.size() + this.maxRowId - 1) / this.maxRowId;
	}

}
